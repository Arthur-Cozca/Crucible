--- ../src-base/minecraft/org/bukkit/Location.java
+++ ../src-work/minecraft/org/bukkit/Location.java
@@ -1,13 +1,19 @@
 package org.bukkit;
 
 import org.bukkit.block.Block;
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.bukkit.configuration.serialization.SerializableAs;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 
+import java.util.LinkedHashMap;
+import java.util.Map;
+
 /**
  * Represents a 3-dimensional position in a world
  */
-public class Location implements Cloneable {
+@SerializableAs("Location")
+public class Location implements Cloneable, ConfigurationSerializable {
     private World world;
     private double x;
     private double y;
@@ -19,9 +25,9 @@
      * Constructs a new Location with the given coordinates
      *
      * @param world The world in which this location resides
-     * @param x The x-coordinate of this new location
-     * @param y The y-coordinate of this new location
-     * @param z The z-coordinate of this new location
+     * @param x     The x-coordinate of this new location
+     * @param y     The y-coordinate of this new location
+     * @param z     The z-coordinate of this new location
      */
     public Location(final World world, final double x, final double y, final double z) {
         this(world, x, y, z, 0, 0);
@@ -31,10 +37,10 @@
      * Constructs a new Location with the given coordinates and direction
      *
      * @param world The world in which this location resides
-     * @param x The x-coordinate of this new location
-     * @param y The y-coordinate of this new location
-     * @param z The z-coordinate of this new location
-     * @param yaw The absolute rotation on the x-plane, in degrees
+     * @param x     The x-coordinate of this new location
+     * @param y     The y-coordinate of this new location
+     * @param z     The z-coordinate of this new location
+     * @param yaw   The absolute rotation on the x-plane, in degrees
      * @param pitch The absolute rotation on the y-plane, in degrees
      */
     public Location(final World world, final double x, final double y, final double z, final float yaw, final float pitch) {
@@ -207,7 +213,7 @@
      * <ul>
      * <li>A pitch of 0 represents level forward facing.
      * <li>A pitch of 90 represents downward facing, or negative y
-     *     direction.
+     * direction.
      * <li>A pitch of -90 represents upward facing, or positive y direction.
      * <ul>
      * Increasing pitch values the equivalent of looking down.
@@ -219,11 +225,11 @@
     }
 
     /**
-     * Sets the pitch of this location, measured in degrees.
+     * Gets the pitch of this location, measured in degrees.
      * <ul>
      * <li>A pitch of 0 represents level forward facing.
      * <li>A pitch of 90 represents downward facing, or negative y
-     *     direction.
+     * direction.
      * <li>A pitch of -90 represents upward facing, or positive y direction.
      * <ul>
      * Increasing pitch values the equivalent of looking down.
@@ -239,7 +245,7 @@
      * facing.
      *
      * @return a vector pointing the direction of this location's {@link
-     *     #getPitch() pitch} and {@link #getYaw() yaw}
+     * #getPitch() pitch} and {@link #getYaw() yaw}
      */
     public Vector getDirection() {
         Vector vector = new Vector();
@@ -293,10 +299,10 @@
     /**
      * Adds the location by another.
      *
-     * @see Vector
      * @param vec The other location
      * @return the same location
      * @throws IllegalArgumentException for differing worlds
+     * @see Vector
      */
     public Location add(Location vec) {
         if (vec == null || vec.getWorld() != getWorld()) {
@@ -312,9 +318,9 @@
     /**
      * Adds the location by a vector.
      *
-     * @see Vector
      * @param vec Vector to use
      * @return the same location
+     * @see Vector
      */
     public Location add(Vector vec) {
         this.x += vec.getX();
@@ -326,11 +332,11 @@
     /**
      * Adds the location by another. Not world-aware.
      *
-     * @see Vector
      * @param x X coordinate
      * @param y Y coordinate
      * @param z Z coordinate
      * @return the same location
+     * @see Vector
      */
     public Location add(double x, double y, double z) {
         this.x += x;
@@ -342,10 +348,10 @@
     /**
      * Subtracts the location by another.
      *
-     * @see Vector
      * @param vec The other location
      * @return the same location
      * @throws IllegalArgumentException for differing worlds
+     * @see Vector
      */
     public Location subtract(Location vec) {
         if (vec == null || vec.getWorld() != getWorld()) {
@@ -361,9 +367,9 @@
     /**
      * Subtracts the location by a vector.
      *
-     * @see Vector
      * @param vec The vector to use
      * @return the same location
+     * @see Vector
      */
     public Location subtract(Vector vec) {
         this.x -= vec.getX();
@@ -376,11 +382,11 @@
      * Subtracts the location by another. Not world-aware and
      * orientation independent.
      *
-     * @see Vector
      * @param x X coordinate
      * @param y Y coordinate
      * @param z Z coordinate
      * @return the same location
+     * @see Vector
      */
     public Location subtract(double x, double y, double z) {
         this.x -= x;
@@ -397,8 +403,8 @@
      * function overflows, which will be caused if the length is too long. Not
      * world-aware and orientation independent.
      *
-     * @see Vector
      * @return the magnitude
+     * @see Vector
      */
     public double length() {
         return Math.sqrt(NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z));
@@ -408,8 +414,8 @@
      * Gets the magnitude of the location squared. Not world-aware and
      * orientation independent.
      *
-     * @see Vector
      * @return the magnitude
+     * @see Vector
      */
     public double lengthSquared() {
         return NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z);
@@ -422,10 +428,10 @@
      * be returned if the inner result of the sqrt() function overflows, which
      * will be caused if the distance is too long.
      *
-     * @see Vector
      * @param o The other location
      * @return the distance
      * @throws IllegalArgumentException for differing worlds
+     * @see Vector
      */
     public double distance(Location o) {
         return Math.sqrt(distanceSquared(o));
@@ -434,10 +440,10 @@
     /**
      * Get the squared distance between this location and another.
      *
-     * @see Vector
      * @param o The other location
      * @return the distance
      * @throws IllegalArgumentException for differing worlds
+     * @see Vector
      */
     public double distanceSquared(Location o) {
         if (o == null) {
@@ -456,8 +462,8 @@
      * scalar. Not world-aware.
      *
      * @param m The factor
-     * @see Vector
      * @return the same location
+     * @see Vector
      */
     public Location multiply(double m) {
         x *= m;
@@ -469,8 +475,8 @@
     /**
      * Zero this location's components. Not world-aware.
      *
-     * @see Vector
      * @return the same location
+     * @see Vector
      */
     public Location zero() {
         x = 0;
@@ -532,7 +538,7 @@
      * Constructs a new {@link Vector} based on this Location
      *
      * @return New Vector containing the coordinates represented by this
-     *     Location
+     * Location
      */
     public Vector toVector() {
         return new Vector(x, y, z);
@@ -557,4 +563,16 @@
     public static int locToBlock(double loc) {
         return NumberConversions.floor(loc);
     }
+
+    public Map<String, Object> serialize() {
+        Map<String, Object> result = new LinkedHashMap<>();
+        result.put("world", this.world.getName());
+        result.put("x", this.x);
+        result.put("y", this.y);
+        result.put("z", this.z);
+        result.put("yaw", this.yaw);
+        result.put("pitch", this.pitch);
+        return result;
+    }
+
 }
